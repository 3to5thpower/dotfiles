snippet i
abbr i
  #include<bits/stdc++.h>
  using namespace std;

  using ll =  long long;
  using pint =  pair<int,int>;
  using vint = vector<int>;
  using vvint = vector<vint>;
  using vpint = vector<pint>;

  #define repi(i,start,end) for(int (i)=(start),TemPNuM=(int)(end);(i)<TemPNuM;++(i))
  #define rep(i,end) repi((i),0,(end))
  #define rfor(x,v) for(auto& (x) : (v))
  #define all(x) (x).begin(),(x).end()
  #define rall(x) (x).rbegin(),(x).rend()
  #define fsort(v,lambda) sort(all((v)),(lambda))
  #define vin(v) rep(i,(v).size())cin >> (v)[i];
  #define vpin(v) rep(i,(v).size())cin>>v[i].first>>v[i].second
  //最終奥義 #define int long long
  template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
  template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1; } return 0; }
  void put_double(double obj){printf("%.12f\n",obj);};
  //lambda: [](int x, int y){return x<y;}
  
  signed main(void){


      return 0;
  }

snippet nCrMOD
abbr nCrMOD
  const int MAX=1000002;
  const int MOD=1000000007;
  ll fac[MAX],finv[MAX],inv[MAX];

  // テーブルを作る前処理
  void COMinit() {
      fac[0] = fac[1] = 1;
      finv[0] = finv[1] = 1;
      inv[1] = 1;
      for (int i = 2; i < MAX; i++){
          fac[i] = fac[i - 1] * i % MOD;
          inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
          finv[i] = finv[i - 1] * inv[i] % MOD;
      }
  }

  // 二項係数計算
  long long COM(int n, int k){
      if (n < k) return 0;
      if (n < 0 || k < 0) return 0;
      return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
  }

snippet UnionFind
abbr UnionFind
  struct UnionFind{
      vint par;
      vint size;
      UnionFind(int n) : par(n),size(n, 1){
          rep(i,n) par[i] = i;
      }
      int root(int x){
          if(par[x] == x) return x;
          return par[x] = root(par[x]);
      }
      void unite(int x, int y){
          x = root(x);
          y = root(y);
          if(x == y) return;
          par[x] = y;
          size[x] = size[y] = size[x] + size[y];
      }
      bool same(int x, int y){
          return root(x) == root(y);
      }
      int size(int x){
          return size[root(x)];
      }
  }
