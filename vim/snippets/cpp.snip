snippet i
abbr i
    #include<cstdint>
    #include<iostream>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<vector>
    #include<set>
    #include<map>
    #include<queue>
    #include<deque>
    #include<stack>
    #include<iterator>
    #include<stack>
    #include<cctype>
    #include<climits>
    #include<string>
    #include<bitset>
    #include<cfloat>
    #include<iomanip>
    #include<numeric>
    #include<utility>
    #include<initializer_list>
     
     
    #define repi(i,start,end)for(int64_t (i)=(start);(i)<(end);++(i))
    #define rep(i,end) repi((i),0,(end))
    #define rfor(x, v) for(auto& (x) : (v))
    #define iterate(itr, v) for(auto (itr)=(v).begin();(itr)!=(v).end();++(itr))
    #define all(x) (x).begin(),(x).end()
    #define rall(x) (x).rbegin(),(x).rend()
    #define vin(v) rep(i,(v).size()) cin >> (v)[i];
    #define vpin(v) rep(i,(v).size()) cin >> (v)[i].first >> (v)[i].second
     
    using namespace std;
    using Int = int64_t;
    using pint = pair<Int, Int>;
    using vint = vector<Int>;
    using vvint = vector<vint>;
    using vpint = vector<pint>;
    using vstr = vector<string>;
     
    template<class T>bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1;  } return 0;  }
    template<class T>bool chmin(T &a, const T &b) { if (b<a) { a=b; return 1;  } return 0;  }
    template<class T>void put_double(T a){cout<<setprecision(15);cout<<a<<"\n";}
    template<class T>void println(T a){cout << a << "\n";}
    template<class T>void put_line(T &v){iterate(itr,v){cout<<*itr<<((itr==--v.end())?"\n":" ");}}
    // auto [x, y] = make_tuple(3, 4); => let (x, y) = (3, 4);
     
    double pi = 3.14159265358979;
     
    int main(void) {


        return 0;
    }


snippet nCrMOD
abbr nCrMOD
  const int MAX=1000002;
  const int MOD=1000000007;
  ll fac[MAX],finv[MAX],inv[MAX];

  // テーブルを作る前処理
  void COMinit() {
      fac[0] = fac[1] = 1;
      finv[0] = finv[1] = 1;
      inv[1] = 1;
      for (int i = 2; i < MAX; i++){
          fac[i] = fac[i - 1] * i % MOD;
          inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;
          finv[i] = finv[i - 1] * inv[i] % MOD;
      }
  }

  // 二項係数計算
  long long COM(int n, int k){
      if (n < k) return 0;
      if (n < 0 || k < 0) return 0;
      return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;
  }

snippet UnionFind
abbr UnionFind
  struct UnionFind{
      vint par;
      vint size;
      UnionFind(int n) : par(n),size(n, 1){
          rep(i,n) par[i] = i;
      }
      int root(int x){
          if(par[x] == x) return x;
          return par[x] = root(par[x]);
      }
      void unite(int x, int y){
          x = root(x);
          y = root(y);
          if(x == y) return;
          par[x] = y;
          size[x] = size[y] = size[x] + size[y];
      }
      bool same(int x, int y){
          return root(x) == root(y);
      }
      int count(int x){
          return size[root(x)];
      }
  };
